# BIOHAZARD -- DO NOT EDIT THIS FILE

label: "default"
description: |
  default configuration
  next line of description
  last line

# SGD parameters
learning_rate: 0.001           # initial learning rate
sgd_learning_rate: 1.0
learning_rate_decay_factor: 1.0
decay_every_n_epoch: null
decay_after_n_epoch: 0         # start decaying learning rate after this many epochs
decay_if_no_progress: null     # measure average loss over this many checkpoints, and decay if no progress
sgd_after_n_epoch: null        # use SGD optimizer after this many epochs (instead of adam/adadelta)
min_learning_rate: 0.000001    # stop training when learning rate is smaller than this

# batch iteration parameters
batch_mode: 'standard'   # standard, random, or strict
shuffle: True            # shuffle dataset at each new epoch
read_ahead: 10           # number of batches to read ahead and sort

# training parameters
max_gradient_norm: 5.0   # clip gradients to this norm
dropout_rate: 0.0        # dropout rate applied to the RNN units
max_train_size: 0        # maximum size of the training data (0 for unlimited)
max_dev_size: 0          # maximum size of the dev data
steps_per_checkpoint: 1000   # number of updates between each checkpoint
steps_per_eval: 1000     # number of updates between each BLEU eval (on dev set)
eval_burn_in: 0          # minimum number of steps before starting BLEU eval
max_steps: 0             # maximum number of updates before stopping
max_epochs: 0            # maximum number of epochs before stopping
keep_best: 4             # number of best checkpoints to keep
feed_previous: 0.0       # randomly feed previous output instead of groundtruth to decoder during training
optimizer: 'adam'        # 'sgd', 'adadelta', or 'adam'

# model (each one of these settings can be defined specifically in `encoders` and `decoder`, or generally here)
batch_size: 80           # training batch size
cell_size: 1000          # size of the RNN cells
embedding_size: 620      # size of the embeddings
attn_size: 1000          # size of the attention layer
layers: 1                # number of RNN layers per encoder and decoder
bidir: True              # use bidirectional encoders
attention_type: global   # global, local, none, last_state, average
attention_window_size: 0 # window size for local attention mechanism
use_lstm: False          # use LSTM units instead of GRU units
character_level: False   # input sequence is at the character level
weight_scale: null       # if not null, initialize all weights to a normal distribution with this stdev
initializer: null        # normal or uniform initializer
tie_embeddings: False    # use same parameters for output projection and output embeddings

maxout: True             # parameters of the decoder
input_attention: True    # use attention as input to the LSTM
use_previous_word: True  # use previous word when predicting a new word
vanilla: False           # use same decoder as Bahdanau et al.
attn_prev_word: False    # use the previous word in the attention model
maxout_stride: null      # apply maxout with this stride on the input sequence (after potential convolutions)
convolutions: null       # perform 1-D convolutions on the output sequence
state_zero: False        # if False s_1 = s_0, otherwise s_1 = next(s_0) (not supported by vanilla decoder)
use_lstm_state: True     # use the entire LSTM state instead of its output to predict next word
output_extra_proj: True  # do an intermediate output projection to embedding size (necessary for tie_embeddings)
bidir_projection: False  # do a projection on the bidir encoder states, to obtain the same dim as an unidir encoder
concat_last_states: False  # initial state of the decoder is a concatenation of all layers' last states
trainable_initial_states: True  # whether the initial states of the encoder are trainable parameters or not

# data
data_dir: data           # directory containing the training data
model_dir: model         # directory where the model will be saved (checkpoints and eval outputs)
train_prefix: train      # name of the training corpus
dev_prefix: [dev]        # names of the development corpora
vocab_prefix: vocab      # name of the vocabulary files
load: []                 # list of checkpoints to load (in this specific order) after main checkpoint

# decoding
score_function: corpus_bleu # name of the main scoring function (used for selecting models)
remove_unk: False        # remove UNK symbols from the decoder output
beam_size: 1             # beam size for decoding (decoder is greedy by default)
ensemble: False          # use an ensemble of models while decoding (specified by the --checkpoints parameter)
output: null             # output file for decoding (writes to standard output by default)
max_len: 50              # maximum length of the sequences generated by the decoder (strongly affects decoding speed)
len_normalization: 1.0   # length normalization coefficient used in beam-search decoder
early_stopping: True     # reduce beam-size each time a finished hypothesis is encountered (affects decoding speed)
raw_output: False        # don't apply any post-processing (e.g. removing UNK tokens, merging subwords, etc.)

# general
gpu_id: 0                # index of the GPU to use
no_gpu: False            # don't use any GPU
allow_growth: True       # allow GPU memory allocation to change during runtime
mem_fraction: 1.0        # maximum fraction of GPU memory to use
freeze_variables: []     # list of variables to freeze during training
log_file: log.txt        # log to this file (in addition to standard output)
parallel_iterations: 16  # parameter of Tensorflow's while_loop (a higher number mean faster training, but more memory usage)
swap_memory: True        # parameter of Tensorflow's while_loop (adaptively store parameters on CPU when no GPU memory is available)
max_to_keep: 1           # keep that many latest checkpoints
keep_every_n_hours: 0    # keep checkpoints every n hours
embeddings_on_cpu: True  # store embedding matrices on CPU/GPU

encoders:                # this is a list (you can specify several encoders)
  - name: fr             # each encoder or decoder has a name (used for naming variables) and an extension (for files)
    ext: fr              # If undefined, `ext` is the same as `name`

decoders:                # Each encoder or decoder can redefine its own values for a number of parameters,
  - name: en             # including `cell_size`, `embedding_size` and `attn_size`
